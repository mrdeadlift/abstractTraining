// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  clerkId        String           @unique
  email          String           @unique
  username       String?
  firstName      String?
  lastName       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  progress       Progress[]
  achievements   Achievement[]
}

model Progress {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @db.ObjectId
  moduleId       String           @db.ObjectId
  exerciseId     String           @db.ObjectId
  status         String           @default("not_started") // not_started, in_progress, completed
  score          Int?
  completedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  module         Module           @relation(fields: [moduleId], references: [id])
  exercise       Exercise         @relation(fields: [exerciseId], references: [id])
}

model Module {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  order          Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  exercises      Exercise[]
  progress       Progress[]
}

model Exercise {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  moduleId       String           @db.ObjectId
  title          String
  description    String
  content        String
  type           String           // modeling, microservice, requirements, data_model
  difficulty     String           // beginner, intermediate, advanced
  points         Int              @default(10)
  order          Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  module         Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress       Progress[]
}

model Achievement {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @db.ObjectId
  title          String
  description    String
  badgeImage     String
  points         Int
  earnedAt       DateTime         @default(now())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}
